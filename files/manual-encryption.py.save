

#!/usr/bin/env python
# -*- coding: utf-8 -*-

""" Manually decrypt a wep message given the WEP key"""

__author__      = "Abraham Rubinstein"
__copyright__   = "Copyright 2017, HEIG-VD"
__license__ 	= "GPL"
__version__ 	= "1.0"
__email__ 		= "abraham.rubinstein@heig-vd.ch"
__status__ 		= "Prototype"

from scapy.all import *
import binascii
import rc4

#Cle wep AA:AA:AA:AA:AA
key='\xaa\xaa\xaa\xaa\xaa'
message = "super message encrypté"

#lecture de message chiffré - rdpcap retourne toujours un array, même si la capture contient un seul paquet
arp = rdpcap('arp.cap')[0] 

# rc4 seed est composé de IV+clé
seed = arp.iv+key 

# Calcul de l'ICV en effectuant un CRC du message
arp.icv = binascii.crc32(message)
icv_encrypted='{:x}'.format(arp.icv).decode("hex")

arp.wepdata = message
message_encrypted=arp.wepdata+icv_encrypted


# Génération de la chaine à XOR avec le keystream
data_to_encrypt = message + str(arp.icv)

#Calcul du keystream
cryptedText = rc4.rc4crypt(data_to_encrypt, seed)  

#calcul du frame body en faisant keystream xor (data + ICV)


#Génération de la trame (MAC Header + IV Header + Frame Body + ICV + CRC)
frame_without_crc = mac + arp.iv + cryptedText + arp.icv
frame_crc = str(binascii.crc32(frame_without_crc))
frame = frame_without_crc + frame_crc

print 'Frame: ' + frame.encode("hex")

a = rdpcap(frame.encode("hex"))

pcap_file = open("arp1.cap", "w")
pcap_file.write(a)
pcap_file.close()
